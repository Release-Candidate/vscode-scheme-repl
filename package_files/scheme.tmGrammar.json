{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "scopeName": "source.scheme",
    "name": "Scheme",
    "fileTypes": [".ss", ".sps", ".scm", ".sch", ".sls"],
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#expression"
        }
    ],
    "repository": {
        "expression": {
            "patterns": [
                { "include": "#s_exp" },
                { "include": "#constant_data" }
            ]
        },
        "s_exp": {
            "patterns": []
        },
        "constant_data": {
            "patterns": [
                { "include": "#string" },
                { "include": "#character" },
                { "include": "#number" },
                { "include": "#boolean" },
                { "include": "#vector" },
                { "include": "#gensym" },
                { "include": "#box" },
                { "include": "#quoted" }
            ]
        },
        "string": {
            "name": "string.quoted.double",
            "begin": "(\")(?<!\\\\)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.string.begin.scheme"
                }
            },
            "end": "(\")(?<!\\\\)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.scheme"
                }
            },
            "patterns": [
                {
                    "name": "constant.character.escape.scheme",
                    "match": "\\\\."
                }
            ]
        },
        "character": {
            "patterns": [
                { "include": "#normal_character" },
                { "include": "#hex_character" },
                { "include": "#special_character" }
            ]
        },
        "normal_character": {
            "name": "constant.character.scheme",
            "match": "#\\\\\\w(?:(?<=[012])\\d\\d)?(?=[\\s#(\\[{)\\]},\"'`;])"
        },
        "hex_character": {
            "name": "constant.character.hexadecimal.scheme",
            "match": "#\\\\x[0-9A-Fa-f]+(?=[\\s#(\\[{)\\]},\"'`;])"
        },
        "special_character": {
            "name": "constant.character.named.scheme",
            "match": "#\\\\(?:nul|bel|ls|nel|rubout|vt|vtab|alarm|backspace|delete|esc|linefeed|newline|page|return|space|tab)(?=[\\s#(\\[{)\\]},\"'`;])"
        },
        "number": {
            "name": "constant.numeric.scheme",
            "patterns": [
                { "include": "#integer" },
                { "include": "#ratio" },
                { "include": "#float" },
                { "include": "#complex" }
            ]
        },
        "integer": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.binary.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([bB]|2[rR])(?:#[eE])?[+-]?[01]+([eEsSfFdDlL][+-]?[01]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.octal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([oO]|8[rR])(?:#[eE])?[+-]?[0-7]+([eEsSfFdDlL][+-]?[0-7]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.decimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#?([dD]|10[rR])?(?:#[eE])?[+-]?[0-9]+([eEsSfFdDlL][+-]?[0-9]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.hexadecimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([xX]|16[rR])(?:#[eE])?[+-]?[0-9a-fA-F]+)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.radix-n.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#[0-9][0-6]?[rR](?:#[eE])?[+-]?[0-9a-zA-Z]+)(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "ratio": {
            "patterns": [
                {
                    "name": "constant.numeric.rational.binary.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([bB]|2[rR])(?:#[eE])?[+-]?[01]+/[01]+([eEsSfFdDlL][+-]?[01]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.rational.octal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([oO]|8[rR])[+-]?(?:#[eE])?[+-]?[0-7]+/[0-7]+([eEsSfFdDlL][+-]?[0-7]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.rational.decimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#?([dD]|10[rR])?(?:#[eE])?[+-]?[0-9]+/[0-9]+([eEsSfFdDlL][+-]?[0-9]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.rational.hexadecimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([xX]|16[rR])(?:#[eE])?[+-]?[0-9a-fA-F]+/[0-9a-fA-F]+)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.rational.radix-n.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#[0-9][0-6]?[rR](?:#[eE])?[+-]?[0-9a-zA-Z]+/[0-9a-zA-Z]+)(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "float": {
            "patterns": [
                {
                    "name": "constant.numeric.float.binary.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=[^()\\[\\]{},;\\s'`&]*(?:\\.|#[iI])))#([bB]|2[rR])(?:#[iI])?[+-]?(?:[01]+|(?=\\.[01]+))\\.?[01]*([eEsSfFdDlL][+-]?[01]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.octal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=[^()\\[\\]{},;\\s'`&]*(?:\\.|#[iI])))#([oO]|8[rR])(?:#[iI])?[+-]?(?:[0-7]+|(?=\\.[0-7]+))\\.?[0-7]*([eEsSfFdDlL][+-]?[0-7]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.decimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=[^()\\[\\]{},;\\s'`&]*(?:\\.|#[iI])))#?([dD]|10[rR])?(?:#[iI])?[+-]?(?:[0-9]+|(?=\\.[0-9]+))\\.?[0-9]*([eEsSfFdDlL][+-]?[0-9]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.hexadecimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=[^()\\[\\]{},;\\s'`&]*(?:\\.|#[iI])))#([xX]|16[rR])(?:#[iI])?[+-]?(?:[0-9a-fA-F]+|(?=\\.[0-9a-fA-F]+))\\.?[0-9a-fA-F]*([eEsSfFdDlL][+-]?[0-9a-fA-F]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.radix-n.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=[^()\\[\\]{},;\\s'`&]*(?:\\.|#[iI])))#[0-9][0-6]?[rR](?:#[iI])?[+-]?(?:[0-9a-zA-Z]+|(?=\\.[0-9a-zA-Z]+))\\.?[0-9a-zA-Z]*([eEsSfFdDlL][+-]?[0-9a-zA-Z]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "complex": {},
        "boolean": {
            "name": "constant.other.boolean.scheme",
            "match": "#(?:[tT](?:[rR][uU][eE])?|(?:[fF](?:[aA][lL][sS][eE])?))(?=[\\s#(\\[{)\\]},\"'`;])"
        },
        "vector": {},
        "gensym": {
            "patterns": [
                {
                    "name": "constant.language.gensym.scheme",
                    "match": "#\\{\\s*\\S+\\s+\\S+\\s*\\}"
                },
                {
                    "name": "constant.language.gensym.pretty.scheme",
                    "match": "#:\\w+(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "box": {
            "name": "storage.modifier.box.scheme",
            "match": "#&"
        },
        "quoted": {
            "patterns": [
                {
                    "name": "keyword.operator.quote.scheme",
                    "match": "('|(?<=\\(\\s*)quote\\s+)"
                },
                {
                    "name": "keyword.operator.quasiquote.scheme",
                    "match": "(`|(?<=\\(\\s*)quasiquote\\s+)"
                },
                {
                    "name": "keyword.operator.unquote.scheme",
                    "match": "(,(?!@)|(?<=\\(\\s*)unquote\\s+)"
                },
                {
                    "name": "keyword.operator.unquote-splicing.scheme",
                    "match": "(,@|(?<=\\(\\s*)unquote-splicing\\s+)"
                }
            ]
        },
        "comment": {
            "patterns": [
                { "include": "#line_comment" },
                { "include": "#block_comment" },
                { "include": "#datum_comment" },
                { "include": "#comment_directive" }
            ]
        },
        "line_comment": {
            "begin": "(^[ \\t]+)?(?=;)",
            "end": "(?!\\G)",
            "beginCaptures": {
                "1": { "name": "punctuation.whitespace.comment.leading.scheme" }
            },
            "patterns": [
                {
                    "name": "comment.line.semicolon.scheme",
                    "begin": ";(?!;)",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                },
                {
                    "name": "comment.line.two-semicolon.scheme",
                    "begin": ";;(?!;)",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                },
                {
                    "name": "markup.other",
                    "begin": ";;;(?!;)",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                },
                {
                    "name": "markup.heading",
                    "begin": ";;;;(?!;)",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                },
                {
                    "name": "markup.bold",
                    "begin": ";;;;;",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                }
            ]
        },
        "block_comment": {
            "begin": "(^[ \\t]+)?(?=#\\|)",
            "end": "(?!\\G)",
            "beginCaptures": {
                "1": { "name": "punctuation.whitespace.comment.leading.scheme" }
            },
            "patterns": [
                {
                    "name": "comment.block.scheme",
                    "begin": "#\\|",
                    "end": "\\|#",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                }
            ]
        },
        "datum_comment": {
            "begin": "(^[ \\t]+)?(?=#;)",
            "end": "(?!\\G)",
            "beginCaptures": {
                "1": { "name": "punctuation.whitespace.comment.leading.scheme" }
            },
            "patterns": [
                {
                    "name": "comment.datum.scheme",
                    "begin": "#;",
                    "end": "[\\])}]",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                }
            ]
        },
        "comment_directive": {
            "begin": "(^[ \\t]+)?(?=#!)",
            "end": "(?!\\G)(?=[\\s#(\\[{)\\]},\"'`;])",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.directive.leading.scheme"
                }
            },
            "patterns": [
                {
                    "name": "storage.other.comment-directive.scheme",
                    "begin": "#!",
                    "end": "\\S(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        }
    }
}
