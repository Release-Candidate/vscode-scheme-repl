{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "scopeName": "source.scheme",
    "name": "Scheme",
    "fileTypes": [".ss", ".sps", ".scm", ".sch", ".sls"],
    "patterns": [
        {
            "include": "#comment"
        },
        { "include": "#library_definition" },
        { "include": "#macro" },
        {
            "include": "#expression"
        }
    ],
    "repository": {
        "comment": {
            "patterns": [
                { "include": "#line_comment" },
                { "include": "#block_comment" },
                { "include": "#datum_comment" },
                { "include": "#comment_directive" }
            ]
        },
        "expression": {
            "patterns": [
                { "include": "#list" },
                { "include": "#constant_data" }
            ]
        },
        "list": {
            "patterns": [
                {
                    "name": "meta.list.parens.scheme",
                    "begin": "\\((?!\\s*library\\s+)",
                    "beginCaptures": {
                        "0": { "name": "meta.brace.round.start.scheme" }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": { "name": "meta.brace.round.end.scheme" }
                    },
                    "patterns": [
                        { "include": "$self" },
                        { "include": "#library_definition" },
                        { "include": "#import" },
                        { "include": "#export" },
                        { "include": "#function" }
                    ]
                },
                {
                    "name": "meta.list.bracket.scheme",
                    "begin": "\\[(?!\\s*library\\s+)",
                    "beginCaptures": {
                        "0": { "name": "meta.brace.square.start.scheme" }
                    },
                    "end": "\\]",
                    "endCaptures": {
                        "0": { "name": "meta.brace.square.end.scheme" }
                    },
                    "patterns": [
                        { "include": "$self" },
                        { "include": "#library_definition" },
                        { "include": "#import" },
                        { "include": "#export" },
                        { "include": "#function" }
                    ]
                }
            ]
        },
        "constant_data": {
            "patterns": [
                { "include": "#string" },
                { "include": "#character" },
                { "include": "#number" },
                { "include": "#boolean" },
                { "include": "#record" },
                { "include": "#vector" },
                { "include": "#gensym" },
                { "include": "#box" },
                { "include": "#primitive" },
                { "include": "#quoted" }
            ]
        },
        "library_definition": {
            "name": "meta.library.scheme",
            "begin": "^\\s*([\\[(])\\s*(library)\\s+([\\[(].+?[\\])])?",
            "end": "([\\])])",
            "beginCaptures": {
                "1": { "name": "meta.brace.round.start.import.scheme" },
                "2": {
                    "name": "keyword.control.library.scheme"
                },
                "3": {
                    "name": "entity.name.type.library.scheme"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "meta.brace.round.end.import.scheme"
                }
            },
            "patterns": [{ "include": "#list" }]
        },
        "import": {
            "name": "keyword.control.import.scheme",
            "match": "(?<=[\\[(]\\s*)import(?:-only)?(?=\\s+)"
        },
        "export": {
            "name": "keyword.control.export.scheme",
            "match": "(?<=[\\[(]\\s*)export(?=\\s+)"
        },
        "macro": {
            "patterns": [{ "include": "#macro_syntax" }]
        },
        "function": {
            "patterns": [
                { "include": "#type_function" },
                { "include": "#define" },
                { "include": "#let" },
                { "include": "#set" },
                { "include": "#parameter" },
                { "include": "#operator" },
                { "include": "#predicate" },
                { "include": "#conditional" },
                { "include": "#control" },
                { "include": "#debug" },
                { "include": "#other_function" }
            ]
        },
        "nothing": { "name": "punctuation.empty.scheme", "match": "" },
        "delimiter": {
            "name": "punctuation.delimiter.scheme",
            "match": "[\\s#,\"'`;&]"
        },
        "type_function": {
            "patterns": [
                {
                    "name": "entity.name.type.lambda.scheme",
                    "match": "(?<=[(\\[]\\s*|#%)(?:case-)?lambda(?=\\s+)"
                },
                {
                    "name": "entity.name.type.string.scheme",
                    "match": "(?<=[(\\[]\\s*)string(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.vector.scheme",
                    "match": "(?<=(?:[(\\[]\\s*)|(?:#%))vector(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.define-record.scheme",
                    "match": "(?<=[(\\[]\\s*)define-record(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.bytevector.scheme",
                    "match": "(?<=[(\\[]\\s*)bytevector(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.fxvector.scheme",
                    "match": "(?<=[(\\[]\\s*)fxvector(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.list.scheme",
                    "match": "(?<=[(\\[]\\s*)list(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.exact.scheme",
                    "match": "(?<=[(\\[]\\s*)exact(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.inexact.scheme",
                    "match": "(?<=[(\\[]\\s*)inexact(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "define": {
            "patterns": [
                {
                    "name": "entity.name.type.define.scheme",
                    "match": "(?<=[(\\[]\\s*)define(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.record.scheme",
                    "match": "(?<=[(\\[]\\s*)define-record(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.structure.scheme",
                    "match": "(?<=[(\\[]\\s*)define-structure(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.foreign-type.scheme",
                    "match": "(?<=[(\\[]\\s*)define-ftype(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.enum.scheme",
                    "match": "(?<=[(\\[]\\s*)define-enumeration(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.values.scheme",
                    "match": "(?<=[(\\[]\\s*)define-values(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.predicate.scheme",
                    "match": "(?<=[(\\[]\\s*)define-condition-type(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.define-property.scheme",
                    "match": "(?<=[(\\[]\\s*)define-property(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.define-top-level-value.scheme",
                    "match": "(?<=[(\\[]\\s*)define-top-level-value(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "let": {
            "patterns": [
                {
                    "name": "keyword.operator.let.scheme",
                    "match": "(?<=[(\\[]\\s*)let(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.let-star.scheme",
                    "match": "(?<=[(\\[]\\s*)let\\*(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.letrec.scheme",
                    "match": "(?<=[(\\[]\\s*)letrec(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.letrec-star.scheme",
                    "match": "(?<=[(\\[]\\s*)letrec\\*(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.let-values.scheme",
                    "match": "(?<=[(\\[]\\s*)let\\*?-values(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "set": {
            "patterns": [
                {
                    "name": "storage",
                    "match": "(?<=[(\\[]\\s*)set!(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "parameter": {
            "patterns": [
                {
                    "name": "variable.parameter.global.scheme",
                    "match": "(?<=[(\\[]\\s*)(?:cd|collect-generation-radix|collect-maximum-generation|collect-notify|collect-request-handler|collect-trip-bytes|command-line|command-line-arguments|console-input-port|console-output-port|current-directory|debug-on-exception|ee-auto-indent|ee-auto-paren-balance|ee-common-identifiers|ee-default-repeat|ee-flash-parens|ee-history-limit|ee-noisy|ee-paren-flash-delay|ee-standard-indent|enable-object-counts|heap-reserve-ratio|release-minimum-generation|scheme-program|scheme-script|scheme-start|source-directories|suppress-greeting)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "variable.parameter.thread.scheme",
                    "match": "(?<=[(\\[]\\s*)(?:abort-handler|base-exception-handler|break-handler|case-sensitive|commonization-level|compile-file-message|compile-imported-libraries|compile-interpret-simple|compile-library-handler|compile-profile|compile-program-handler|compress-format|compress-level|console-error-port|cp0-effort-limit|cp0-outer-unroll-limit|cp0-score-limit|current-error-port|current-eval|current-exception-state|current-expand|current-input-port|current-locate-source-object-source|current-make-source-object|current-output-port|current-transcoder|custom-port-buffer-size|debug-condition|debug-level|default-record-equal-procedure|default-record-hash-procedure|enable-cross-library-optimization|eval-syntax-expanders-when|exit-handler|expand-output|expand/optimize-output|fasl-compressed|file-buffer-size|generate-allocation-counts|generate-covin-files|generate-inspector-information|generate-instruction-counts|generate-interrupt-trap|generate-procedure-source-information|generate-profile-forms|generate-wpo-files|gensym-count|gensym-prefix|import-notify|interaction-environment|internal-defines-as-letrec*|keyboard-interrupt-handler|library-directories|library-extensions|library-search-handler|optimize-level|pretty-initial-indent|pretty-line-length|pretty-maximum-lines|pretty-one-line-limit|pretty-standard-indent|print-brackets|print-char-name|print-extended-identifiers|print-gensym|print-graph|print-length|print-level|print-precision|print-radix|print-record|print-unicode|print-vector-length|profile-line-number-color|profile-palette|random-seed|require-nongenerative-clause|reset-handler|run-cp0|self-evaluating-vectors|subset-mode|timer-interrupt-handler|trace-output-port|trace-print|undefined-variable-warnings|waiter-prompt-and-read|waiter-prompt-string|waiter-write)(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)[+*/-]|expt(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(?:-1\\+|1\\+|add1|sub1|1-)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(quotient|remainder|modulo)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(div|mod|div-and-mod)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(div0|mod0|div0-and-mod0)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(truncate|floor|ceiling|round)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(abs|max|min)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(gcd|lcm)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(rationalize|numerator|denominator)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(real-part|imag-part|make-rectangular|make-polar|angle|magnitude)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(sqrt|exact-integer-sqrt|exp|log)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(sin|cos|tan|asin|acos|atan)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(bitwise-not|bitwise-and|bitwise-ior|bitwise-xor|bitwise-if|bitwise-bit-count|bitwise-length|bitwise-first-bit-set|bitwise-copy-bit|bitwise-bit-field|bitwise-copy-bit-field|bitwise-arithmetic-shift-right|bitwise-arithmetic-shift-left|bitwise-arithmetic-shift|bitwise-rotate-bit-field|bitwise-reverse-bit-field)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(f[xl][/*+-])(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(f[xl](?:min|max|div|mod|modulo|div-and-mod|div0|mod0|div0-and-mod0|[+*-]/carry|not|and|ior|xor|if))(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(fx(?:bit-count|length|first-bit-set|bit-set\\?|copy-bit|bit-field|copy-bit-field|arithmetic-shift-right|arithmetic-shift-left|arithmetic-shift|rotate-bit-field|reverse-bit-field))(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(fl(?:round|truncate|floor|ceiling|numerator|denominator))(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.arithmetic.scheme",
                    "match": "(?<=[\\[(]\\s*)(fl(?:abs|exp|log|sin|cos|tan|asin|acos|atan|sqrt|expt))(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "predicate": {
            "patterns": [
                {
                    "name": "keyword.operator.eq.scheme",
                    "match": "(?<=[\\[(]\\s*)eq\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.eqv.scheme",
                    "match": "(?<=[\\[(]\\s*)eqv\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.equal.scheme",
                    "match": "(?<=[\\[(]\\s*)equal\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.eq.scheme",
                    "match": "(?<=[\\[(]\\s*)=(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.lt.scheme",
                    "match": "(?<=[\\[(]\\s*)<(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.gt.scheme",
                    "match": "(?<=[\\[(]\\s*)>(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.lte.scheme",
                    "match": "(?<=[\\[(]\\s*)<=(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.gte.scheme",
                    "match": "(?<=[\\[(]\\s*)>=(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.positive.scheme",
                    "match": "(?<=[\\[(]\\s*)positive\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.negative.scheme",
                    "match": "(?<=[\\[(]\\s*)negative\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.zero.scheme",
                    "match": "(?<=[\\[(]\\s*)zero\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.even.scheme",
                    "match": "(?<=[\\[(]\\s*)even\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.odd.scheme",
                    "match": "(?<=[\\[(]\\s*)odd\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.finite.scheme",
                    "match": "(?<=[\\[(]\\s*)finite\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.infinite.scheme",
                    "match": "(?<=[\\[(]\\s*)infinite\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.nan.scheme",
                    "match": "(?<=[\\[(]\\s*)nan\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.bitwise-bit-set.scheme",
                    "match": "(?<=[\\[(]\\s*)bitwise-bit-set\\?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.numeric-is.scheme",
                    "match": "(?<=[\\[(]\\s*)(f[xl](?:zero|positive|negative|even|odd)\\?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.float-is.scheme",
                    "match": "(?<=[\\[(]\\s*)(fl(?:integer|finite|infinite|nan)\\?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.numeric-compare.scheme",
                    "match": "(?<=[\\[(]\\s*)(f[xl][<>]?=?\\??)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.char-compare.scheme",
                    "match": "(?<=[\\[(]\\s*)(char(?:-ci)?[<>]?=?\\?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.char-compare.scheme",
                    "match": "(?<=[\\[(]\\s*)(char(?:-lower-case|-title-case|-upper-case)\\?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.operator.string-compare.scheme",
                    "match": "(?<=[\\[(]\\s*)(string(?:-ci)?[<>]?=?\\?)(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "conditional": {
            "patterns": [
                {
                    "name": "keyword.control.conditional.if.scheme",
                    "match": "(?<=[\\[(]\\s*)if(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.conditional.not.scheme",
                    "match": "(?<=[\\[(]\\s*)not(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.conditional.and.scheme",
                    "match": "(?<=[\\[(]\\s*)and(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.conditional.or.scheme",
                    "match": "(?<=[\\[(]\\s*)or(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.conditional.cond.scheme",
                    "match": "(?<=[\\[(]\\s*)cond(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.conditional.else.scheme",
                    "match": "(?<=[\\[(]\\s*)(?:else|=>)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.conditional.case.scheme",
                    "match": "(?<=[\\[(]\\s*)case(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.conditional.when.scheme",
                    "match": "(?<=[\\[(]\\s*)when(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.conditional.unless.scheme",
                    "match": "(?<=[\\[(]\\s*)unless(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "control": {
            "patterns": [
                {
                    "name": "keyword.control.eval.scheme",
                    "match": "(?<=[\\[(]\\s*)eval(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.apply.scheme",
                    "match": "(?<=[\\[(]\\s*)apply(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.begin.scheme",
                    "match": "(?<=[\\[(]\\s*)begin(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.do.scheme",
                    "match": "(?<=[\\[(]\\s*)do(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.map.scheme",
                    "match": "(?<=[\\[(]\\s*)map(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.filter.scheme",
                    "match": "(?<=[\\[(]\\s*)filter(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.for-each.scheme",
                    "match": "(?<=[\\[(]\\s*)for-each(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.exists.scheme",
                    "match": "(?<=[\\[(]\\s*)exists(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.for-all.scheme",
                    "match": "(?<=[\\[(]\\s*)for-all(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.fold-left.scheme",
                    "match": "(?<=[\\[(]\\s*)fold-left(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.fold-right.scheme",
                    "match": "(?<=[\\[(]\\s*)fold-right(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.vector-map.scheme",
                    "match": "(?<=[\\[(]\\s*)vector-map(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.vector-for-each.scheme",
                    "match": "(?<=[\\[(]\\s*)vector-for-each(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.string-for-each.scheme",
                    "match": "(?<=[\\[(]\\s*)string-for-each(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.delay.scheme",
                    "match": "(?<=[\\[(]\\s*)delay(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.force.scheme",
                    "match": "(?<=[\\[(]\\s*)force(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.delay.scheme",
                    "match": "(?<=[\\[(]\\s*)delay(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.values.scheme",
                    "match": "(?<=[\\[(]\\s*)values(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.call-with-values.scheme",
                    "match": "(?<=[\\[(]\\s*)call-with-values(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.eval.scheme",
                    "match": "(?<=[\\[(]\\s*)eval(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.environment.scheme",
                    "match": "(?<=[\\[(]\\s*)environment(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.null-environment.scheme",
                    "match": "(?<=[\\[(]\\s*)null-environment(?=[\\s#(\\[{)\\]},\"'`;])"
                },

                {
                    "name": "keyword.control.scheme-report-environment.scheme",
                    "match": "(?<=[\\[(]\\s*)scheme-report-environment(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.call/cc.scheme",
                    "match": "(?<=[\\[(]\\s*)call/cc(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.call/1cc.scheme",
                    "match": "(?<=[\\[(]\\s*)call/1cc(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.call-with-current-continuation.scheme",
                    "match": "(?<=[\\[(]\\s*)call-with-current-continuation(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "keyword.control.dynamic-wind.scheme",
                    "match": "(?<=[\\[(]\\s*)dynamic-wind(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "debug": {
            "patterns": [
                {
                    "name": "markup.bold.scheme",
                    "match": "(?<=[\\[(]\\s*)break(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "other_function": {
            "name": "entity.name.function.scheme",
            "match": "(?<!let(?:\\*?(?:rec|-values)?\\s*?)\\s+[\\[(]+\\s*)(?<=[\\[(]+\\s*)[^\\s#(\\[{)\\]},\"'`;]+(?=[\\s#(\\[{)\\]},\"'`;])"
        },
        "macro_syntax": {
            "patterns": [
                {
                    "name": "entity.name.type.define-macro.scheme",
                    "match": "(?<=[(\\[]\\s*)define-syntax(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.syntax-rules.scheme",
                    "match": "(?<=[(\\[]\\s*)syntax-rules(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.let-syntax.scheme",
                    "match": "(?<=[(\\[]\\s*)let(?:rec)?-syntax(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.identifier-syntax.scheme",
                    "match": "(?<=[(\\[]\\s*)identifier-syntax(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.syntax-case.scheme",
                    "match": "(?<=[(\\[]\\s*)syntax-case(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.syntax.scheme",
                    "match": "(?<=[(\\[]\\s*)syntax(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.with-syntax.scheme",
                    "match": "(?<=[(\\[]\\s*)with-syntax(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.quasisyntax.scheme",
                    "match": "(?<=[(\\[]\\s*)quasisyntax(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.unsyntax.scheme",
                    "match": "(?<=[(\\[]\\s*)unsyntax(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.unsyntax-splicing.scheme",
                    "match": "(?<=[(\\[]\\s*)unsyntax-splicing(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.make-variable-transformer.scheme",
                    "match": "(?<=[(\\[]\\s*)make-variable-transformer(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.syntax->datum.scheme",
                    "match": "(?<=[(\\[]\\s*)syntax->datum(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.datum->syntax.scheme",
                    "match": "(?<=[(\\[]\\s*)datum->syntax(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.syntax-object->datum.scheme",
                    "match": "(?<=[(\\[]\\s*)syntax-object->datum(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.datum->syntax-object.scheme",
                    "match": "(?<=[(\\[]\\s*)datum->syntax-object(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.generate-temporaries.scheme",
                    "match": "(?<=[(\\[]\\s*)generate-temporaries(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.extend-syntax.scheme",
                    "match": "(?<=[(\\[]\\s*)extend-syntax(?:-type)?(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "entity.name.type.syntax.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;])#'"
                },
                {
                    "name": "entity.name.type.quasisyntax.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;])#`"
                },
                {
                    "name": "entity.name.type.unsyntax.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;])#,(?!@)"
                },
                {
                    "name": "entity.name.type.unsyntax-splicing.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;])#,@"
                }
            ]
        },
        "string": {
            "name": "string.quoted.double.scheme",
            "begin": "(\")(?<!\\\\)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.string.begin.scheme"
                }
            },
            "end": "(\")(?<!\\\\)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.scheme"
                }
            },
            "patterns": [
                {
                    "name": "constant.character.escape.scheme",
                    "match": "\\\\."
                }
            ]
        },
        "character": {
            "patterns": [
                { "include": "#normal_character" },
                { "include": "#hex_character" },
                { "include": "#special_character" }
            ]
        },
        "normal_character": {
            "name": "constant.character.scheme",
            "match": "#\\\\\\w(?:(?<=[012])\\d\\d)?(?=[\\s#(\\[{)\\]},\"'`;])"
        },
        "hex_character": {
            "name": "constant.character.hexadecimal.scheme",
            "match": "#\\\\x[0-9A-Fa-f]+(?=[\\s#(\\[{)\\]},\"'`;])"
        },
        "special_character": {
            "name": "constant.character.named.scheme",
            "match": "#\\\\(?:nul|bel|ls|nel|rubout|vt|vtab|alarm|backspace|delete|esc|linefeed|newline|page|return|space|tab)(?=[\\s#(\\[{)\\]},\"'`;])"
        },
        "number": {
            "name": "constant.numeric.scheme",
            "patterns": [
                { "include": "#integer" },
                { "include": "#ratio" },
                { "include": "#float" },
                { "include": "#complex" }
            ]
        },
        "integer": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.binary.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([bB]|2[rR])(?:#[eE])?[+-]?[01]+([eEsSfFdDlL][+-]?[01]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.octal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([oO]|8[rR])(?:#[eE])?[+-]?[0-7]+([eEsSfFdDlL][+-]?[0-7]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.decimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?(#[dD]|10[rR])?(?:#[eE])?[+-]?[0-9]+([eEsSfFdDlL][+-]?[0-9]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.hexadecimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([xX]|16[rR])(?:#[eE])?[+-]?[0-9a-fA-F]+)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.radix-n.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#[0-9][0-9]?[rR](?:#[eE])?[+-]?[0-9a-zA-Z]+)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.inf.scheme",
                    "match": "[+-][iI][nN][fF]\\.0"
                },
                {
                    "name": "constant.numeric.integer.float.binary.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE]|(?=[^()\\[\\]{},;\\s'`&]*#[eE]))#([bB]|2[rR])(?:#[eE])?[+-]?(?:[01]+|(?=\\.[01]+))\\.[01]*([eEsSfFdDlL][+-]?[01]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.float.octal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE]|(?=[^()\\[\\]{},;\\s'`&]*#[eE]))#([oO]|8[rR])(?:#[eE])?[+-]?(?:[0-7]+|(?=\\.[0-7]+))\\.[0-7]*([eEsSfFdDlL][+-]?[0-7]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.float.decimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE]|(?=[^()\\[\\]{},;\\s'`&]*#[eE]))(#[dD]|10[rR])?(?:#[eE])?[+-]?(?:[0-9]+|(?=\\.[0-9]+))\\.[0-9]*([eEsSfFdDlL][+-]?[0-9]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.float.hexadecimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE]|(?=[^()\\[\\]{},;\\s'`&]*#[eE]))#([xX]|16[rR])(?:#[eE])?[+-]?(?:[0-9a-fA-F]+|(?=\\.[0-9a-fA-F]+))\\.[0-9a-fA-F]*([eEsSfFdDlL][+-]?[0-9a-fA-F]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.integer.float.radix-n.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE]|(?=[^()\\[\\]{},;\\s'`&]*#[eE]))#[0-9][0-9]?[rR](?:#[eE])?[+-]?(?:[0-9a-zA-Z]+|(?=\\.[0-9a-zA-Z]+))\\.[0-9a-zA-Z]*([eEsSfFdDlL][+-]?[0-9a-zA-Z]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "ratio": {
            "patterns": [
                {
                    "name": "constant.numeric.rational.binary.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([bB]|2[rR])(?:#[eE])?[+-]?[01]+/[01]+([eEsSfFdDlL][+-]?[01]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.rational.octal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([oO]|8[rR])[+-]?(?:#[eE])?[+-]?[0-7]+/[0-7]+([eEsSfFdDlL][+-]?[0-7]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.rational.decimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?(#[dD]|10[rR])?(?:#[eE])?[+-]?[0-9]+/[0-9]+([eEsSfFdDlL][+-]?[0-9]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.rational.hexadecimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#([xX]|16[rR])(?:#[eE])?[+-]?[0-9a-fA-F]+/[0-9a-fA-F]+)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.rational.radix-n.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[eE])?#[0-9][0-9]?[rR](?:#[eE])?[+-]?[0-9a-zA-Z]+/[0-9a-zA-Z]+)(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "float": {
            "patterns": [
                {
                    "name": "constant.numeric.float.nan.scheme",
                    "match": "[+-][nN][aA][nN]\\.0"
                },
                {
                    "name": "constant.numeric.float.inf.scheme",
                    "match": "[+-][iI][nN][fF]\\.0"
                },
                {
                    "name": "constant.numeric.float.binary.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=[^()\\[\\]{},;\\s'`&]*(?:\\.|#[iI])))#([bB]|2[rR])(?:#[iI])?[+-]?(?:[01]+|(?=\\.[01]+))\\.?[01]*([eEsSfFdDlL][+-]?[01]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.octal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=[^()\\[\\]{},;\\s'`&]*(?:\\.|#[iI])))#([oO]|8[rR])(?:#[iI])?[+-]?(?:[0-7]+|(?=\\.[0-7]+))\\.?[0-7]*([eEsSfFdDlL][+-]?[0-7]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.decimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=[^()\\[\\]{},;\\s'`&]*(?:\\.|#[iI])))(#[dD]|10[rR])?(?:#[iI])?[+-]?(?:[0-9]+|(?=\\.[0-9]+))\\.?[0-9]*([eEsSfFdDlL][+-]?[0-9]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.hexadecimal.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=[^()\\[\\]{},;\\s'`&]*(?:\\.|#[iI])))#([xX]|16[rR])(?:#[iI])?[+-]?(?:[0-9a-fA-F]+|(?=\\.[0-9a-fA-F]+))\\.?[0-9a-fA-F]*([eEsSfFdDlL][+-]?[0-9a-fA-F]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.radix-n.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=[^()\\[\\]{},;\\s'`&]*(?:\\.|#[iI])))#[0-9][0-9]?[rR](?:#[iI])?[+-]?(?:[0-9a-zA-Z]+|(?=\\.[0-9a-zA-Z]+))\\.?[0-9a-zA-Z]*([eEsSfFdDlL][+-]?[0-9a-zA-Z]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.binary.rational.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=#([bB]|2[rR])#[iI]))#([bB]|2[rR])(?:#[iI])?[+-]?[01]+/[01]+([eEsSfFdDlL][+-]?[01]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.octal.rational.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=#([oO]|8[rR])#[iI]))#([oO]|8[rR])[+-]?(?:#[iI])?[+-]?[0-7]+/[0-7]+([eEsSfFdDlL][+-]?[0-7]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.decimal.rational.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=#?([dD]|10[rR])?#[iI]))(#[dD]|10[rR])?(?:#[iI])?[+-]?[0-9]+/[0-9]+([eEsSfFdDlL][+-]?[0-9]*)?)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.hexadecimal.rational.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=#([xX]|16[rR])#[iI]))#([xX]|16[rR])(?:#[iI])?[+-]?[0-9a-fA-F]+/[0-9a-fA-F]+)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.float.radix-n.rational.scheme",
                    "match": "(?<=^|[\\s#(\\[{)\\]},\"'`;&])((?:#[iI]|(?=#[0-9][0-9]?[rR]#[iI]))#[0-9][0-9]?[rR](?:#[iI])?[+-]?[0-9a-zA-Z]+/[0-9a-zA-Z]+)(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "complex": {
            "name": "constant.numeric.complex.scheme",
            "patterns": [
                {
                    "name": "constant.numeric.complex.simple.scheme",
                    "match": "(?<=^|[\\s(\\[{)\\]},\"'`;&])(?:#[iIeEbBoOxXdD]|#[0-9][0-9][rR])*[+-]?[0-9a-fA-F.]*(?:/[0-9a-fA-F.]+)?[+-][0-9a-fA-F.]*(?:/[0-9a-fA-F.]+)?i(?![nN][fF]\\.0)(?=[\\s#(\\[{)\\]},\"'`;])"
                },
                {
                    "name": "constant.numeric.complex.polar.simple.scheme",
                    "match": "(?<=^|[\\s(\\[{)\\]},\"'`;&])(?:#[iIeEbBoOxXdD]|#[0-9][0-9][rR])*[+-]?[0-9a-fA-F.]+(?:/[0-9a-fA-F.]+)?@[+-]?[0-9a-fA-F.]+(?:/[0-9a-fA-F.]+)?(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "boolean": {
            "name": "constant.other.boolean.scheme",
            "match": "#(?:[tT](?:[rR][uU][eE])?|(?:[fF](?:[aA][lL][sS][eE])?))(?=[\\s#(\\[{)\\]},\"'`;])"
        },
        "record": {
            "patterns": [
                {
                    "name": "entity.name.type.record.scheme",
                    "begin": "#\\[",
                    "end": "\\]",
                    "patterns": [{ "include": "$self" }]
                }
            ]
        },
        "vector": {
            "patterns": [
                {
                    "name": "entity.name.type.vector.scheme",
                    "begin": "#(\\d+)?\\(",
                    "end": "\\)",
                    "patterns": [{ "include": "$self" }]
                },
                {
                    "name": "entity.name.type.bytevector.scheme",
                    "begin": "#(\\d+)?vu8\\(",
                    "end": "\\)",
                    "patterns": [{ "include": "$self" }]
                },
                {
                    "name": "entity.name.type.fxvector.scheme",
                    "begin": "#(\\d+)?vfx\\(",
                    "end": "\\)",
                    "patterns": [{ "include": "$self" }]
                }
            ]
        },
        "gensym": {
            "patterns": [
                {
                    "name": "constant.language.gensym.scheme",
                    "match": "#(\\{)\\s*\\S+\\s+\\S+\\s*(\\})",
                    "captures": {
                        "1": {
                            "name": "meta.brace.curly.start.scheme"
                        },
                        "2": {
                            "name": "meta.brace.curly.end.scheme"
                        }
                    }
                },
                {
                    "name": "constant.language.gensym.pretty.scheme",
                    "match": "#:\\w+(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        },
        "box": {
            "name": "storage.modifier.box.scheme",
            "match": "#&"
        },
        "primitive": {
            "name": "storage.modifier.primitive.scheme",
            "match": "#%([^\\s#(\\[{)\\]},\"'`;]+)",
            "captures": {
                "1": {
                    "patterns": [{ "include": "#function" }]
                }
            }
        },
        "quoted": {
            "patterns": [
                {
                    "name": "keyword.operator.quote.scheme",
                    "match": "('|(?<=\\(\\s*)quote\\s+)"
                },
                {
                    "name": "keyword.operator.quasiquote.scheme",
                    "match": "(`|(?<=\\(\\s*)quasiquote\\s+)"
                },
                {
                    "name": "keyword.operator.unquote.scheme",
                    "match": "(,(?!@)|(?<=\\(\\s*)unquote\\s+)"
                },
                {
                    "name": "keyword.operator.unquote-splicing.scheme",
                    "match": "(,@|(?<=\\(\\s*)unquote-splicing\\s+)"
                }
            ]
        },

        "line_comment": {
            "begin": "(^[ \\t]+)?(?=;+)",
            "end": "(?!\\G)",
            "beginCaptures": {
                "1": { "name": "punctuation.whitespace.comment.leading.scheme" }
            },
            "patterns": [
                {
                    "name": "comment.line.semicolon.scheme",
                    "begin": ";(?!;)",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                },
                {
                    "name": "comment.line.two-semicolon.scheme",
                    "begin": ";;(?!;)",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                },
                {
                    "name": "markup.other",
                    "begin": ";;;(?!;)",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                },
                {
                    "name": "markup.heading",
                    "begin": ";;;;(?!;)",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                },
                {
                    "name": "markup.bold",
                    "begin": ";;;;;",
                    "end": "\\n",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                }
            ]
        },
        "block_comment": {
            "begin": "(^[ \\t]+)?(?=#\\|)",
            "end": "(?!\\G)",
            "beginCaptures": {
                "1": { "name": "punctuation.whitespace.comment.leading.scheme" }
            },
            "patterns": [
                {
                    "name": "comment.block.scheme",
                    "begin": "#\\|",
                    "end": "\\|#",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                }
            ]
        },
        "datum_comment": {
            "begin": "(^[ \\t]+)?(?=#;)",
            "end": "(?!\\G)",
            "beginCaptures": {
                "1": { "name": "punctuation.whitespace.comment.leading.scheme" }
            },
            "patterns": [
                {
                    "name": "comment.datum.scheme",
                    "begin": "#;",
                    "end": "[)\\]]",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.scheme"
                        }
                    }
                }
            ]
        },
        "comment_directive": {
            "begin": "(^[ \\t]+)?(?=#!)",
            "end": "(?!\\G)(?=[\\s#(\\[{)\\]},\"'`;])",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.directive.leading.scheme"
                }
            },
            "patterns": [
                {
                    "name": "storage.other.comment-directive.scheme",
                    "begin": "#!",
                    "end": "\\S(?=[\\s#(\\[{)\\]},\"'`;])"
                }
            ]
        }
    }
}
